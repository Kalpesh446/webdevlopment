1). Explain Life cycle in Class Component and functional component with Hooks :

In React, components are the building blocks of user interfaces. Components can be divided into two main types: Class Components and Functional Components (with Hooks). Each type of component has a different way of handling the component's life cycle, which refers to the series of events that occur from the birth to the destruction of a component.

Life cycle in Class Components:
Class components are the traditional way of creating components in React. They extend the React.Component class and have special methods that are called at different stages of the component's life cycle. Here's a brief explanation of the main life cycle methods:
constructor(): This method is called when the component is first created. It is typically used to initialize the component's state and to bind event handlers.

componentDidMount(): This method is called after the component has been rendered to the screen. It is commonly used to perform side effects, such as fetching data from a server.

componentDidUpdate(prevProps, prevState): This method is called whenever the component's props or state change. It is useful for reacting to changes and performing actions based on the previous state or props.

shouldComponentUpdate(nextProps, nextState): This method is called before the component is re-rendered. It allows you to control whether the component should update or not, based on the changes in props or state. By default, it returns true, allowing the component to update.

componentWillUnmount(): This method is called just before the component is removed from the DOM. It is often used to clean up resources, such as cancelling timers or event listeners.

render(): This method is the only required method in a class component. It returns the JSX that defines the component's UI.

Class components provide fine-grained control over the component's life cycle, but they can be more verbose and sometimes lead to complex code.

Life cycle in Functional Components with Hooks:
With the introduction of Hooks in React 16.8, functional components gained the ability to use state and lifecycle features. Hooks provide a more concise and straightforward way to manage the component's life cycle. The most commonly used Hooks for managing the life cycle are useState, useEffect, useContext, etc.
useState: This Hook allows functional components to have their own state, similar to the state in class components.

useEffect: This Hook is used to perform side effects in functional components, similar to componentDidMount, componentDidUpdate, and componentWillUnmount in class components.

Here's how you can replicate some of the class component life cycle methods with Hooks:

useState: This Hook allows you to define and use state variables in functional components. For example:

jsx
Copy code
import React, { useState } from 'react';

function FunctionalComponent() {
  const [count, setCount] = useState(0);

  // ...
}
useEffect: This Hook allows you to handle side effects. It takes a function as its first argument, which will be executed after the component has rendered. The second argument to useEffect is an array of dependencies. When the dependencies change, the effect will be executed again. If you pass an empty array ([]) as the second argument, the effect will only run once, similar to componentDidMount in class components.

jsx
Copy code
import React, { useState, useEffect } from 'react';

function FunctionalComponent() {
  const [count, setCount] = useState(0);

  useEffect(() => {
    // This function will be called after each render
    // Perform side effects or subscribe/unsubscribe here

    return () => {
      // This function will be called before the component is unmounted
      // Clean up resources here (e.g., unsubscribe)
    };
  }, [count]); // Only re-run the effect if count changes

  // ...
}
Using Hooks, you can effectively manage the life cycle of functional components with less boilerplate code. It's worth noting that not all class component life cycle methods have a direct equivalent in Hooks. However, Hooks provide a more straightforward approach for managing state and side effects in functional components.